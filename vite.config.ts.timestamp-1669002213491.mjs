// vite.config.ts
import { defineConfig, loadEnv } from "vite";
import react from "@vitejs/plugin-react";
import vitePluginImp from "vite-plugin-imp";

// src/styles/antd.cjs
var antd_default = {
  "font-size-base": "16px",
  "primary-color": "#6782f1",
  "border-radius-base": "4px"
};

// vite.config.ts
import path from "path";
var __vite_injected_original_dirname = "C:\\Users\\54543\\Desktop\\\u81EA\u7531APP\\p2p-file";
function resolve(url) {
  return path.resolve(__vite_injected_original_dirname, url);
}
var vite_config_default = defineConfig(({ mode }) => {
  const env = loadEnv(mode, "./");
  return {
    mode,
    server: {
      port: 4e3,
      host: "0.0.0.0",
      proxy: {
        "/api": {
          target: "https://open.ahapocket.cn",
          changeOrigin: true
        }
      },
      headers: {
        "Access-Control-Allow-Origin": "*"
      }
    },
    base: mode === "development" ? "./" : `${env.VITE_APP_ROOT}`,
    build: {
      assetsDir: "./"
    },
    resolve: {
      alias: {
        "@": resolve("./src")
      }
    },
    css: {
      devSourcemap: true,
      preprocessorOptions: {
        scss: {
          additionalData: `
            @use "@/styles/index.scss" as *;
          `
        },
        less: {
          javascriptEnabled: true,
          modifyVars: antd_default
        }
      }
    },
    plugins: [
      react(),
      vitePluginImp({
        libList: [
          {
            libName: "antd",
            style: (name) => `antd/es/${name}/style`
          }
        ]
      })
    ]
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAic3JjL3N0eWxlcy9hbnRkLmNqcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIkM6XFxcXFVzZXJzXFxcXDU0NTQzXFxcXERlc2t0b3BcXFxcXHU4MUVBXHU3NTMxQVBQXFxcXHAycC1maWxlXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFw1NDU0M1xcXFxEZXNrdG9wXFxcXFx1ODFFQVx1NzUzMUFQUFxcXFxwMnAtZmlsZVxcXFx2aXRlLmNvbmZpZy50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vQzovVXNlcnMvNTQ1NDMvRGVza3RvcC8lRTglODclQUElRTclOTQlQjFBUFAvcDJwLWZpbGUvdml0ZS5jb25maWcudHNcIjtpbXBvcnQgeyBkZWZpbmVDb25maWcsIGxvYWRFbnYgfSBmcm9tICd2aXRlJ1xyXG5pbXBvcnQgcmVhY3QgZnJvbSAnQHZpdGVqcy9wbHVnaW4tcmVhY3QnXHJcbmltcG9ydCB2aXRlUGx1Z2luSW1wIGZyb20gJ3ZpdGUtcGx1Z2luLWltcCdcclxuaW1wb3J0IGFudGRTdHlsZXMgZnJvbSAnLi9zcmMvc3R5bGVzL2FudGQuY2pzJ1xyXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xyXG5cclxuZnVuY3Rpb24gcmVzb2x2ZSh1cmwpIHtcclxuICByZXR1cm4gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgdXJsKVxyXG59XHJcblxyXG4vLyBodHRwczovL3ZpdGVqcy5kZXYvY29uZmlnL1xyXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoKHsgbW9kZSB9KSA9PiB7XHJcbiAgY29uc3QgZW52ID0gbG9hZEVudihtb2RlLCAnLi8nKVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgbW9kZSxcclxuICAgIHNlcnZlcjoge1xyXG4gICAgICBwb3J0OiA0MDAwLFxyXG4gICAgICBob3N0OiAnMC4wLjAuMCcsXHJcbiAgICAgIC8vIG9wZW46IHRydWUsXHJcbiAgICAgIHByb3h5OiB7XHJcbiAgICAgICAgJy9hcGknOiB7XHJcbiAgICAgICAgICB0YXJnZXQ6ICdodHRwczovL29wZW4uYWhhcG9ja2V0LmNuJyxcclxuICAgICAgICAgIGNoYW5nZU9yaWdpbjogdHJ1ZSxcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJzogJyonLFxyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICAgIGJhc2U6IG1vZGUgPT09ICdkZXZlbG9wbWVudCcgPyAnLi8nIDogYCR7IGVudi5WSVRFX0FQUF9ST09UIH1gLCAvLyBcdTc1MUZcdTRFQTdcdTczQUZcdTU4ODNcdTg5ODFcdTdFRERcdTVCRjlcdThERUZcdTVGODRcdUZGMENcdTU0MjZcdTUyMTlcdTVCNTBcdTVFOTRcdTc1MjhcdTY1RTBcdTZDRDVcdTYyN0VcdTUyMzBcclxuICAgIGJ1aWxkOiB7XHJcbiAgICAgIGFzc2V0c0RpcjogJy4vJ1xyXG4gICAgfSxcclxuICAgIHJlc29sdmU6IHsgLy8gXHU5MTREXHU3RjZFXHU4REVGXHU1Rjg0XHU1MjJCXHU1NDBEXHJcbiAgICAgIGFsaWFzOiB7XHJcbiAgICAgICAgJ0AnOiByZXNvbHZlKCcuL3NyYycpLFxyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICAgIGNzczogeyAvLyBjc3NcdTkxNERcdTdGNkVcclxuICAgICAgLy8gXHU1RjAwXHU1NDJGIGNzcyBcdTc2ODQgU291cmNlTWFwXHJcbiAgICAgIGRldlNvdXJjZW1hcDogdHJ1ZSxcclxuICAgICAgcHJlcHJvY2Vzc29yT3B0aW9uczoge1xyXG4gICAgICAgIHNjc3M6IHsgLy8gXHU1MTY4XHU1QzQwc2Nzc1x1NkNFOFx1NTE2NVxyXG4gICAgICAgICAgYWRkaXRpb25hbERhdGE6IGBcclxuICAgICAgICAgICAgQHVzZSBcIkAvc3R5bGVzL2luZGV4LnNjc3NcIiBhcyAqO1xyXG4gICAgICAgICAgYFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbGVzczogeyAvLyBcdTgxRUFcdTVCOUFcdTRFNDlhbnRkXHU2ODM3XHU1RjBGXHJcbiAgICAgICAgICBqYXZhc2NyaXB0RW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICAgIG1vZGlmeVZhcnM6IGFudGRTdHlsZXMsXHJcbiAgICAgICAgfSxcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHBsdWdpbnM6IFtcclxuICAgICAgcmVhY3QoKSxcclxuICAgICAgdml0ZVBsdWdpbkltcCh7XHJcbiAgICAgICAgbGliTGlzdDogW1xyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBsaWJOYW1lOiAnYW50ZCcsXHJcbiAgICAgICAgICAgIHN0eWxlOiAobmFtZSkgPT4gYGFudGQvZXMvJHsgbmFtZSB9L3N0eWxlYCxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgXSxcclxuICAgICAgfSlcclxuICAgIF0sXHJcbiAgfVxyXG59KVxyXG4iLCAiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIkM6XFxcXFVzZXJzXFxcXDU0NTQzXFxcXERlc2t0b3BcXFxcXHU4MUVBXHU3NTMxQVBQXFxcXHAycC1maWxlXFxcXHNyY1xcXFxzdHlsZXNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkM6XFxcXFVzZXJzXFxcXDU0NTQzXFxcXERlc2t0b3BcXFxcXHU4MUVBXHU3NTMxQVBQXFxcXHAycC1maWxlXFxcXHNyY1xcXFxzdHlsZXNcXFxcYW50ZC5janNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL0M6L1VzZXJzLzU0NTQzL0Rlc2t0b3AvJUU4JTg3JUFBJUU3JTk0JUIxQVBQL3AycC1maWxlL3NyYy9zdHlsZXMvYW50ZC5janNcIjtleHBvcnQgZGVmYXVsdCB7XG4gICdmb250LXNpemUtYmFzZSc6ICcxNnB4JyxcbiAgJ3ByaW1hcnktY29sb3InOiAnIzY3ODJmMScsXG4gICdib3JkZXItcmFkaXVzLWJhc2UnOiAnNHB4Jyxcbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBNlQsU0FBUyxjQUFjLGVBQWU7QUFDblcsT0FBTyxXQUFXO0FBQ2xCLE9BQU8sbUJBQW1COzs7QUNGNFQsSUFBTyxlQUFRO0FBQUEsRUFDblcsa0JBQWtCO0FBQUEsRUFDbEIsaUJBQWlCO0FBQUEsRUFDakIsc0JBQXNCO0FBQ3hCOzs7QURBQSxPQUFPLFVBQVU7QUFKakIsSUFBTSxtQ0FBbUM7QUFNekMsU0FBUyxRQUFRLEtBQUs7QUFDcEIsU0FBTyxLQUFLLFFBQVEsa0NBQVcsR0FBRztBQUNwQztBQUdBLElBQU8sc0JBQVEsYUFBYSxDQUFDLEVBQUUsS0FBSyxNQUFNO0FBQ3hDLFFBQU0sTUFBTSxRQUFRLE1BQU0sSUFBSTtBQUU5QixTQUFPO0FBQUEsSUFDTDtBQUFBLElBQ0EsUUFBUTtBQUFBLE1BQ04sTUFBTTtBQUFBLE1BQ04sTUFBTTtBQUFBLE1BRU4sT0FBTztBQUFBLFFBQ0wsUUFBUTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsY0FBYztBQUFBLFFBQ2hCO0FBQUEsTUFDRjtBQUFBLE1BQ0EsU0FBUztBQUFBLFFBQ1AsK0JBQStCO0FBQUEsTUFDakM7QUFBQSxJQUNGO0FBQUEsSUFDQSxNQUFNLFNBQVMsZ0JBQWdCLE9BQU8sR0FBSSxJQUFJO0FBQUEsSUFDOUMsT0FBTztBQUFBLE1BQ0wsV0FBVztBQUFBLElBQ2I7QUFBQSxJQUNBLFNBQVM7QUFBQSxNQUNQLE9BQU87QUFBQSxRQUNMLEtBQUssUUFBUSxPQUFPO0FBQUEsTUFDdEI7QUFBQSxJQUNGO0FBQUEsSUFDQSxLQUFLO0FBQUEsTUFFSCxjQUFjO0FBQUEsTUFDZCxxQkFBcUI7QUFBQSxRQUNuQixNQUFNO0FBQUEsVUFDSixnQkFBZ0I7QUFBQTtBQUFBO0FBQUEsUUFHbEI7QUFBQSxRQUNBLE1BQU07QUFBQSxVQUNKLG1CQUFtQjtBQUFBLFVBQ25CLFlBQVk7QUFBQSxRQUNkO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFBQSxJQUNBLFNBQVM7QUFBQSxNQUNQLE1BQU07QUFBQSxNQUNOLGNBQWM7QUFBQSxRQUNaLFNBQVM7QUFBQSxVQUNQO0FBQUEsWUFDRSxTQUFTO0FBQUEsWUFDVCxPQUFPLENBQUMsU0FBUyxXQUFZO0FBQUEsVUFDL0I7QUFBQSxRQUNGO0FBQUEsTUFDRixDQUFDO0FBQUEsSUFDSDtBQUFBLEVBQ0Y7QUFDRixDQUFDOyIsCiAgIm5hbWVzIjogW10KfQo=
